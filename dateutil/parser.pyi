from __future__ import unicode_literals

import datetime
from typing import Any, IO, Mapping, Optional, Sequence, Text, Tuple, Union, Callable

from dateutil.tz import tzoffset, tzutc

_FileOrStr = Union[bytes, Text, IO[str], IO[Any]]
_ParseRet = Union[datetime.datetime, Tuple[datetime.datetime, Tuple[Text]]]

class parserinfo:
    JUMP = ...  # type: Sequence[str]
    WEEKDAYS = ...  # type: Sequence[Sequence[str]]
    MONTHS = ...  # type: Sequence[Sequence[str]]
    HMS = ...  # type: Sequence[Sequence[str]]
    AMPM = ...  # type: Sequence[Sequence[str]]
    UTCZONE = ...  # type: Sequence[str]
    PERTAIN = ...  # type: Sequence[str]
    TZOFFSET = ...  # type: Mapping[str, int]
    dayfirst = ...  # type: bool
    yearfirst = ...  # type: bool
    def __init__(self, dayfirst: bool = ..., yearfirst: bool = ...) -> None: ...
    def jump(self, name: str) -> bool: ...
    def weekday(self, name: str) -> Optional[int]: ...
    def month(self, name: str) -> Optional[int]: ...
    def hms(self, name: str) -> Optional[int]: ...
    def ampm(self, name: str) -> Optional[int]: ...
    def pertain(self, name: str) -> bool: ...
    def utczone(self, name: str) -> bool: ...
    def tzoffset(self, name: str) -> Optional[int]: ...
    def convertyear(self, year: int, century_specified: bool = ...) -> int: ...
    def validate(self, res: datetime.datetime) -> bool: ...

class parser:
    info: parserinfo = ...
    def __init__(self, info: Optional[parserinfo] = ...) -> None: ...
    def parse(self, timestr, default: Optional[Any] = ..., ignoretz: bool = ..., tzinfos: Optional[Any] = ..., **kwargs): ...

def parse(timestr: _FileOrStr, parserinfo: Optional[_parserinfo] = ..., **kwargs: Any) -> _ParseRet: ...

class isoparser:
    def __init__(self, sep: str = ...) -> None: ...
    def isoparse(self, dt_str: _FileOrStr) -> datetime.datetime: ...
    def parse_isodate(self, datestr: _FileOrStr) -> datetime.date: ...
    def parse_isotime(self, timestr: _FileOrStr) -> datetime.time: ...
    def parse_tzstr(self, tzstr: _FileOrStr, zero_as_utc: bool = ...) -> Union[tzoffset, tzutc]: ...

isoparse = ...  # type: Callable[[_FileOrStr], datetime.datetime]
